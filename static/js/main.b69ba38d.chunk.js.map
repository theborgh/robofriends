{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","_ref","robotList","map","rob","components_Card","key","username","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchBoxChange","e","setState","target","value","filterList","state","robots","filter","r","toLowerCase","includes","_this2","fetch","then","response","json","users","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAceA,EAZF,SAACC,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDAAf,IACIH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,4BAAAC,OAA8BP,EAAMQ,GAApC,mBACpBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,MACXR,EAAAC,EAAAC,cAAA,SAAIH,EAAMU,UCOXC,EAZE,SAAAC,GAAiB,IAAfC,EAAeD,EAAfC,UAEf,OACIZ,EAAAC,EAAAC,cAAA,WAEIU,EAAUC,IAAI,SAAAC,GAAG,OACbd,EAAAC,EAAAC,cAACa,EAAD,CAAMC,IAAKF,EAAIP,GAAIA,GAAIO,EAAIP,GAAIC,KAAMM,EAAIN,KAAMS,SAAUH,EAAIG,SAAUR,MAAOK,EAAIL,YCCnFS,EARG,SAAAP,GAAiCA,EAA/BQ,YAA+B,IAAlBC,EAAkBT,EAAlBS,aAC7B,OACIpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gDAAgDkB,KAAK,SAASC,YAAY,mCAAmCC,SAAUH,MCMrII,EATA,SAACzB,GAEZ,OACIC,EAAAC,EAAAC,cAAA,OAAKuB,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACrC5B,EAAM6B,WCiDJC,qBAhDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAkBJI,kBAAoB,SAAAC,GAIhBR,EAAKS,SAAS,CAAEpB,YAAamB,EAAEE,OAAOC,SAvB5BX,EA0BdY,WAAa,WACT,OAAOZ,EAAKa,MAAMC,OAAOC,OAAO,SAAAC,GAAC,OAAIA,EAAEtC,KAAKuC,cAAcC,SAASlB,EAAKa,MAAMxB,YAAY4B,kBAzB1FjB,EAAKa,MAAQ,CACTC,OAAQ,GACRzB,YAAa,IAJPW,mFASM,IAAAmB,EAAAhB,KAEhBiB,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAWL,EAAKV,SAAS,CAAEK,OAAQU,uCAkB7C,OAAiC,IAA7BrB,KAAKU,MAAMC,OAAOW,OACXvD,EAAAC,EAAAC,cAAA,wBAGHF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,YAEAH,EAAAC,EAAAC,cAACsD,EAAD,CAAWpC,aAAca,KAAKI,oBAC9BrC,EAAAC,EAAAC,cAACuD,EAAD,KACIzD,EAAAC,EAAAC,cAACwD,EAAD,CAAU9C,UAAWqB,KAAKS,wBAzChCiB,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.b69ba38d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'> {/* tachyons styles */}\r\n            <img alt='robot' src={`https://www.robohash.org/${props.id}?size=200x200`} />\r\n            <div className='robotInfo'>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robotList}) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n            robotList.map(rob => \r\n                <Card key={rob.id} id={rob.id} name={rob.name} username={rob.username} email={rob.email} />)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='bg-lightest-blue dib br3 pa3 ma2 bw2 shadow-5' type='search' placeholder='Type the name of a bot to search' onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        };\r\n    }\r\n\r\n    // executes after render()\r\n    componentDidMount() {\r\n        // fetch() is a method of the Window object\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => { this.setState({ robots: users }) });\r\n    }\r\n\r\n    // This is an arbitrary method name to handle a SearchBox event\r\n    // It uses the arrow function syntax so that the THIS keyword will reference App instead of \r\n    // the object where the event originated (which would happen with the normal syntax)\r\n    onSearchBoxChange = e => {\r\n\r\n        // ALWAYS use the setState() method to update the state, \r\n        // do not assign it directly with this.state.saerchfield = ...\r\n        this.setState({ searchField: e.target.value });\r\n    }\r\n\r\n    filterList = () => {\r\n        return this.state.robots.filter(r => r.name.toLowerCase().includes(this.state.searchField.toLowerCase()));\r\n    }\r\n\r\n    render() {\r\n        if (this.state.robots.length === 0) {\r\n            return <h1>Loading...</h1>;\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robobook</h1>\r\n                    {/* searchChange is a PROP, onSearchBoxChange is a METHOD */}\r\n                    <SearchBox searchChange={this.onSearchBoxChange} />\r\n                    <Scroll>\r\n                        <CardList robotList={this.filterList()} />\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}